def InstanceId = ''
def publicIp = ''


pipeline  {

  agent any

  environment {
      GIT_CREDENTIALS = "6b4c12e1-9424-48b3-ab99-63569aae8280"
      GITHUB_REPO = 'https://github.com/Mzsd/DevOps_Neflix_Project.git'
      AWS_CREDENTIALS = '64dc9d40-3fba-4dbf-b46d-2f715607e938'
      AWS_DEFAULT_REGION = 'us-east-1'
      INSTANCE_NAME_PREFIX = "myflix_webserver"
      SSH_KEY_FILE_NAME = "myflix-key"
      SSH_KEY_FILE = "devops_ssh"
  }

  stages {

    stage('Create EC2 Instance')  {
      
      steps {
        script {

          git credentialsId: GIT_CREDENTIALS, url: env.GITHUB_REPO

          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS}"]]) {
            try {
              def instance_name = "${env.INSTANCE_NAME_PREFIX}_${env.BUILD_NUMBER}"

              InstanceId = sh(
                script: """aws ec2 run-instances \
                          --image-id ami-041349811d2fa3f3a \
                          --count 1 \
                          --instance-type t2.micro \
                          --key-name ${env.SSH_KEY_FILE_NAME} \
                          --security-group-ids sg-0c2c4fb89d89deb9a \
                          --subnet-id subnet-0022cfaef95fe0f02 \
                          --tag-specifications 'ResourceType=instance, Tags=[{Key=Name, Value=${instance_name}}, {Key=version, Value=${params.version}}]' \
                          --associate-public-ip-address \
                          --query 'Instances[0].InstanceId' \
                          --output text""", 
                returnStdout: true
              ).trim()

              sh "aws ec2 wait instance-running --instance-ids ${InstanceId}"
              sh "aws ec2 modify-instance-attribute --instance-id ${InstanceId} --no-disable-api-termination"

              publicIp = sh(
                script: """aws ec2 describe-instances \
                --instance-ids ${InstanceId} \
                --query 'Reservations[0].Instances[0].PublicIpAddress' \
                --output text""",
                returnStdout: true
              ).trim()

              sshagent (credentials: [SSH_KEY_FILE]) {
                  // Clone Git repo on the EC2 instance using the SSH key
                def remote = [:];
                remote.name = instance_name;
                remote.host = publicIp;
                remote.user = 'root'; 
                remote.identifyFile = SSH_KEY_FILE;
                remote.allowAnyHosts = true;

                sshCommand remote: remote, command: "git clone -b ${params.version} ${env.GITHUB_REPO}"
              }
            } catch (Exception e) {
              // if (InstanceId && InstanceId != 'None') {
              //   sh "aws ec2 terminate-instances --instance-ids ${InstanceId}"
              // }
              throw e
            }
          }
        }
      }
    }
  }

  // post  {
  //   aborted {
  //     script  {
  //       if (InstanceId && InstanceId != 'None') {
  //         withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS}"]]) {
  //           sh "aws ec2 terminate-instances --instance-ids ${InstanceId}"
  //           sh "aws ec2 wait instance-terminated --instance-ids ${InstanceId}"
  //           echo "EC2 instance ${InstanceId} terminated due to build cancellation."
  //         }
  //       } else  {
  //         echo "Build cancelled, but no EC2 instance was created to terminate."
  //       }
  //     }
  //   }
  // }
}