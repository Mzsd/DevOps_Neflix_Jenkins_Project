def InstanceId = ''
def publicIp = ''


pipeline  {

  agent any

  environment {
      GIT_CREDENTIALS = "gitdevops"
      GITHUB_REPO_PARTIAL = '@github.com/Mzsd/DevOps_Neflix_Project.git'
      AWS_CREDENTIALS = '64dc9d40-3fba-4dbf-b46d-2f715607e938'
      AWS_DEFAULT_REGION = 'us-east-1'
      INSTANCE_NAME_PREFIX = "myflix_webserver"
      SSH_KEY_FILE_NAME = "myflix-key"
      SSH_KEY_FILE = "devops_ssh_creds"
  }

  stages {

    stage('Create EC2 Instance')  {
      
      steps {
        script {

          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS}"]]) {
            try {
              def instance_name = "${env.INSTANCE_NAME_PREFIX}_${env.BUILD_NUMBER}"

              InstanceId = sh(
                script: """aws ec2 run-instances \
                          --image-id ami-041349811d2fa3f3a \
                          --count 1 \
                          --instance-type t2.micro \
                          --key-name ${env.SSH_KEY_FILE_NAME} \
                          --security-group-ids sg-0c2c4fb89d89deb9a \
                          --subnet-id subnet-0022cfaef95fe0f02 \
                          --tag-specifications 'ResourceType=instance, Tags=[{Key=Name, Value=${instance_name}}, {Key=version, Value=${params.version}}]' \
                          --associate-public-ip-address \
                          --query 'Instances[0].InstanceId' \
                          --output text""", 
                returnStdout: true
              ).trim()

              sh "aws ec2 wait instance-running --instance-ids ${InstanceId}"
              sh "aws ec2 modify-instance-attribute --instance-id ${InstanceId} --no-disable-api-termination"

              publicIp = sh(
                script: """aws ec2 describe-instances \
                --instance-ids ${InstanceId} \
                --query 'Reservations[0].Instances[0].PublicIpAddress' \
                --output text""",
                returnStdout: true
              ).trim()
            } catch (Exception e) {
              // if (InstanceId && InstanceId != 'None') {
              //   sh "aws ec2 terminate-instances --instance-ids ${InstanceId}"
              // }
              // throw e
            }
          }
        }
      }
    }

    stage('Deploy Code')  {
      
      steps {
        script {
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS}"]]) {
            try {
              sshagent (credentials: [SSH_KEY_FILE], ignoreMissing: true) {
                withCredentials([string(credentialsId: "${GIT_CREDENTIALS}", variable: 'GITHUB_TOKEN')]) {

                sh  """
                        ssh -o StrictHostKeyChecking=no ubuntu@${publicIp} '
                            sudo apt-get update &&
                            sudo apt-get install -y git &&
                            mkdir webapp &&
                            git clone -b ${params.version} https://${GITHUB_TOKEN}${env.GITHUB_REPO_PARTIAL} &&
                            echo "Installing Docker" &&
                            sudo apt-get install ca-certificates curl gnupg &&
                            sudo install -m 0755 -d /etc/apt/keyrings &&
                            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg &&
                            sudo chmod a+r /etc/apt/keyrings/docker.gpg  &&

                            echo \
                              "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                              \$(. /etc/os-release && echo "\$VERSION_CODENAME") stable" | \
                              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null &&

                            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
                            sudo chmod +x /usr/local/bin/docker-compose &&
                            
                            sudo apt-get update &&
                            sudo apt-get install docker-compose-plugin &&
                            cd Dev* &&
                            docker-compose build --no-cache &&
                            docker-compose up
                        '
                    """
                }
              }
            } catch (Exception e) {
              // if (InstanceId && InstanceId != 'None') {
              //   sh "aws ec2 terminate-instances --instance-ids ${InstanceId}"
              // }
              throw e
            }
          }
        }
      }
    }
  }

//   post  {
//     aborted {
//       script  {
//         if (InstanceId && InstanceId != 'None') {
//           withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${env.AWS_CREDENTIALS}"]]) {
//             sh "aws ec2 terminate-instances --instance-ids ${InstanceId}"
//             sh "aws ec2 wait instance-terminated --instance-ids ${InstanceId}"
//             echo "EC2 instance ${InstanceId} terminated due to build cancellation."
//           }
//         } else  {
//           echo "Build cancelled, but no EC2 instance was created to terminate."
//         }
//       }
//     }
//   }
}